// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/yufy/crontab/internal/pkg/config"
	"github.com/yufy/crontab/internal/pkg/database"
	"github.com/yufy/crontab/internal/pkg/etcd"
	"github.com/yufy/crontab/internal/pkg/log"
	"github.com/yufy/crontab/internal/worker"
	"github.com/yufy/crontab/internal/worker/executor"
	"github.com/yufy/crontab/internal/worker/executor/locker"
	"github.com/yufy/crontab/internal/worker/job"
	"github.com/yufy/crontab/internal/worker/scheduler"
	"github.com/yufy/crontab/internal/worker/store"
)

// Injectors from wire.go:

func CreateWorker(cf string) (*worker.Worker, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	option, err := worker.NewOption(viper)
	if err != nil {
		return nil, err
	}
	logOption, err := log.NewOption(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(logOption)
	if err != nil {
		return nil, err
	}
	etcdOption, err := etcd.NewOption(viper)
	if err != nil {
		return nil, err
	}
	client, err := etcd.New(etcdOption)
	if err != nil {
		return nil, err
	}
	databaseOption, err := database.NewOption(viper)
	if err != nil {
		return nil, err
	}
	db, err := database.New(databaseOption, logger)
	if err != nil {
		return nil, err
	}
	storeStore := store.New(db, logger)
	lockerLocker := locker.New(logger, client)
	executorExecutor := executor.New(logger, lockerLocker)
	schedulerScheduler := scheduler.New(logger, storeStore, executorExecutor)
	manager := job.NewManager(logger, client, schedulerScheduler)
	workerWorker := worker.New(option, logger, manager)
	return workerWorker, nil
}
